#include "board.h"
#include "movegen.h"

#include <sstream>
#include <numeric>
#include <cassert>

namespace jchess {
    namespace { // zobrist hash hardcoded constants.
        // https://www.chessprogramming.org/Zobrist_Hashing
        constexpr int NUM_ZOBRIST_VALS = 781;
        constexpr int ZOB_PIECE_OFFSET = 0;
        constexpr int ZOB_SIDE_OFFSET = 12*64;
        constexpr int ZOB_CASTLE_OFFSET = 12*64+1;
        constexpr int ZOB_ENP_FILE_OFFSET = 12*64+1+4;

        const uint64_t zobrist_values[NUM_ZOBRIST_VALS] {16675118366540682266ull, 12625201646945071355ull, 3906467855326707443ull, 16493614350688911882ull, 2840797133488089486ull, 17198378181396894304ull, 4753589432377993572ull, 17900449469350336588ull, 12221822055279466468ull, 4210314433456517080ull, 6421441706289512306ull, 18127016882481476114ull, 11469291435561567701ull, 2585806789824946136ull, 3585296505574592798ull, 16723048460352304060ull, 2912550806384865373ull, 3806226571734105924ull, 16130018071457967778ull, 4274252822917783035ull, 9148260574757030548ull, 8597598297064085598ull, 6397199076765753106ull, 5081854658692850581ull, 14287289591187483552ull, 16736156368312225773ull, 3818991507044620528ull, 1688207538101571247ull, 5525467027462560947ull, 5617700062227335180ull, 10993757879432495714ull, 566794452412920835ull, 15772140448863184961ull, 1449872757225657187ull, 6582114885325397731ull, 902184134931187547ull, 15816151269521094541ull, 3378778964947155301ull, 16858879376537526313ull, 15145447968129113793ull, 8179350815545626542ull, 2169785333205096671ull, 9527284909726976102ull, 2065120817459163648ull, 16462266965223052729ull, 2394948616445810635ull, 5596280426988161725ull, 9675018486165656304ull, 11414766296896892989ull, 8861379738242249441ull, 14823008520129882422ull, 1994893664771032538ull, 11659374325591143842ull, 13667164626285633754ull, 14419191820556103164ull, 6697253738821092181ull, 10951223378084435397ull, 17819900276578152530ull, 11369796766891115873ull, 11684783277950061155ull, 14287676822349419574ull, 11992048609726679850ull, 13933574578270236940ull, 13652834810513976812ull, 14606178976623615176ull, 12286756074011238791ull, 12959169277436831812ull, 7652625371490244416ull, 7900114084735575692ull, 15842305642108289ull, 16809434063812832704ull, 6339502164170157882ull, 12578642115399915787ull, 13115236715604877647ull, 13135339696508565769ull, 15195192318595766031ull, 11771598925939811559ull, 7859153715166117913ull, 9958830632606668312ull, 3767469270038525872ull, 5319154138506104369ull, 7562722118155166043ull, 8847033748361339041ull, 8686010441452721813ull, 17671381970488942075ull, 11024435777579395744ull, 17030805190502633437ull, 10426158406727213505ull, 899032665207476422ull, 2725677267063153299ull, 17913179412249697800ull, 2677417952959016509ull, 8250482436770431176ull, 5496998231663796657ull, 8421167402150066608ull, 17275290038354990486ull, 2954743246015009191ull, 6035874494299805100ull, 7090533469569790907ull, 5162386342008382618ull, 13553186648736040138ull, 4802821768428907606ull, 8237826867142054108ull, 5877896497415380514ull, 16928346191898314835ull, 17224925871679386049ull, 11593365469586235312ull, 10678112803194202047ull, 11772938235977561767ull, 3524760455943721083ull, 5802864507107027762ull, 16157460717644734909ull, 4971744276250009992ull, 16041302394671513398ull, 4019934620650033179ull, 428038405450933274ull, 2477939128172398976ull, 13074088305774072002ull, 11277284686861608606ull, 6563949232664913553ull, 3701258245398561086ull, 6805288903012724078ull, 8328377326299795710ull, 12179472420347016927ull, 7623506527436654583ull, 13119002773718494711ull, 3331653520337405580ull, 13084322547084310607ull, 3372109354889902219ull, 1426018619905279168ull, 7910492594060905649ull, 3209680192636092504ull, 17164234061906718104ull, 1587181780252893628ull, 2581722868259630188ull, 9013989649761132971ull, 4417049415048167802ull, 2424419731103187278ull, 1698577119281298457ull, 15023044392908480398ull, 10172508004852065901ull, 1302693999051673908ull, 8672922775794402111ull, 15815559041394701216ull, 11689168150031518717ull, 15449712533795568076ull, 8293327425495199241ull, 12758590554594414374ull, 17671782272816707089ull, 3948427773099143316ull, 6138955592589944041ull, 9285070149199594974ull, 7405999108489017682ull, 7017386522762712452ull, 10129168494623274337ull, 1220923095043796789ull, 3231658872124890238ull, 13945818710654487784ull, 7775617562759009589ull, 1425036419115146082ull, 1603864299921881633ull, 1777920724593568014ull, 11345268479273031059ull, 2188537815884518810ull, 10041285268962359050ull, 2489595493630669624ull, 258080399743801099ull, 10689486852468058779ull, 18395150019491653639ull, 13281564371938669045ull, 3016084217332668590ull, 14617334896965312855ull, 14101778369583674529ull, 11242542318019840289ull, 4888199787837983906ull, 881901577125376145ull, 8086590468829444294ull, 8534037799063570548ull, 1480980810663594610ull, 12977175621509560249ull, 3662344090890654498ull, 10524974768319578581ull, 16121595823357899405ull, 825868753366133660ull, 14256018934943088390ull, 3086106358236280664ull, 10203243504870969979ull, 3775415860296057482ull, 2492056804831702257ull, 6967513459428557601ull, 15250261391527754780ull, 17121937133650127093ull, 4304673456464059894ull, 8704344372687680258ull, 16857712063064593838ull, 6349146680065746962ull, 3467956074394949096ull, 15360845109168244652ull, 2582698369357622486ull, 17154733687152048977ull, 4624928860306274496ull, 9045939508988964240ull, 11040424839841795745ull, 11192651701777783891ull, 6102522177469384414ull, 1122553752413822675ull, 17141207817055518327ull, 15811958515859435058ull, 12160606052289633713ull, 17954921658914321919ull, 9695460947317659217ull, 5820097133263023220ull, 14164318422467894466ull, 221497528802589478ull, 13256838388892807186ull, 12941130643497458491ull, 14621468412156384220ull, 4355591020702291968ull, 10110379004408914525ull, 8991895951248425837ull, 2695697292283506742ull, 12735993668794499687ull, 5808945651198193664ull, 13635427500549147511ull, 1852841725420024064ull, 7696423499111143121ull, 8013792403471789594ull, 16657334770883804521ull, 10038760837359662481ull, 9111444328092859943ull, 12401934257233000125ull, 10325247140625592373ull, 721207212270905848ull, 2038385770674270996ull, 14888970516816848244ull, 15906522286387612134ull, 15432747179220305210ull, 10641584222242622698ull, 4594824416255969783ull, 10588001516786865455ull, 14756145085786886516ull, 4317057223061070971ull, 15152624394878449578ull, 107779016903275250ull, 1084366554039196970ull, 17906423327032325192ull, 10218913901004712865ull, 884635529082426081ull, 7916546134948826971ull, 8247648742511064112ull, 2475388195933335576ull, 12675412470098339527ull, 5966012295588771395ull, 9717194413605530901ull, 2858265480425957085ull, 311714006049576302ull, 12341640026222155296ull, 15653341574807253686ull, 10077657298779513179ull, 12860691501122884136ull, 8987631574124739066ull, 13982114524337847155ull, 10587027770016022285ull, 1183981903469461687ull, 1427599328227823696ull, 2173678753516846518ull, 12962233398517513961ull, 4455138874481960986ull, 17296747888086937212ull, 1067802198389693544ull, 2837500938465713059ull, 6223496788017043412ull, 14667007199144263776ull, 2510753732211507481ull, 4177909555937097011ull, 11340949499124465607ull, 2005910240183864040ull, 13782916517546137968ull, 11632948398974949460ull, 2947578314362766576ull, 11991234710769174285ull, 12206987618455887179ull, 4915591837280917595ull, 11122835495348910673ull, 5363204257296222323ull, 8064642324102121000ull, 16287026905180457323ull, 6763948557414226634ull, 14281417154800160197ull, 2806483474640596661ull, 4441019500480816774ull, 8545980372577618852ull, 14963959783571832729ull, 15457337992339825939ull, 4270000597671354608ull, 1880719780952839782ull, 15246891530372969132ull, 2769152485075471711ull, 6734903014273867476ull, 11750474586213882520ull, 7148056137416482618ull, 15716354645384740008ull, 10656751927058988583ull, 17212122357048745719ull, 12689633002362698457ull, 1252612034638320065ull, 6342177632004951049ull, 11040570797839132535ull, 7633408821764031741ull, 8512001052971973791ull, 14767677444545996992ull, 2934898493182910283ull, 15226568487818768519ull, 597151494512613992ull, 15552361286786589403ull, 20721170361432189ull, 12623420975533866508ull, 7262811336774248873ull, 9337201060280934972ull, 713067127643113061ull, 6412772404772260421ull, 12302077883461594229ull, 2371287286995964052ull, 2934253526286927735ull, 14333228279195231042ull, 6284721949105655486ull, 10642335740574031257ull, 6195228012180982335ull, 18329278521951230696ull, 17443051154770814077ull, 4195324311966742843ull, 13315530699766348697ull, 10406945026014804297ull, 13001935633821337061ull, 16754687095969975865ull, 10133531721610362036ull, 12949566849678611678ull, 13761059490734319017ull, 11121472346752618766ull, 3332189380446979955ull, 79886159704981950ull, 5795916111599577398ull, 5731867806345968515ull, 10915176439738617010ull, 14030615388405874413ull, 273796282033380779ull, 6474709636068360516ull, 8647691620456072156ull, 13833154455867968412ull, 12196501885116559369ull, 4033675339817680471ull, 1118927822149908414ull, 9345528805822653037ull, 16503964472323288243ull, 14114111455068221515ull, 9584163500191154891ull, 15413797651608833152ull, 14269648086618371819ull, 18386565532416586757ull, 245662412306860474ull, 9698820965110515708ull, 5946572754618504728ull, 16285447215644770601ull, 8325953665755390876ull, 16747722680497123613ull, 6689769103546939344ull, 10823438885914840398ull, 3836613754436608910ull, 4728151871745716606ull, 4061959557099039474ull, 11157617413035895824ull, 15463796528540055327ull, 1883544390126832925ull, 5342242236539983926ull, 16735377541089192975ull, 1248737541075492656ull, 11037331897196995421ull, 12870349777743287966ull, 582389619137855412ull, 9807316031685712800ull, 3213975164255846885ull, 5955178687317490177ull, 4141664308139360224ull, 11791946511783758208ull, 16237784842488180486ull, 1974171074482610584ull, 13990190226788650721ull, 11943299099514977525ull, 10083140351014986658ull, 6013707294724034765ull, 2388214737302660024ull, 14720819330138831950ull, 10287067636278644301ull, 3043376614833852091ull, 15706178244556784647ull, 15425443231049810200ull, 1966248186924183237ull, 11316360131610607366ull, 3634672437079524761ull, 13488397117070138344ull, 12246633053612153724ull, 12509401663091568211ull, 8331554453166634834ull, 7411020858867800175ull, 14958855032516272978ull, 14827411507494623939ull, 3153101468081084362ull, 10593347440063475793ull, 8431136908570891831ull, 5223154412599018305ull, 7307372337626703051ull, 13454840847280488486ull, 8234596946581821035ull, 11457975328009654219ull, 950718700086463744ull, 4654553306128550711ull, 16890812300327996869ull, 8875324276923177868ull, 493731889463527908ull, 18075347703353381172ull, 13209440189688755869ull, 12984096093366162595ull, 11377621810151312573ull, 8145690796835640764ull, 940445103078231877ull, 15452083972277852035ull, 7298863896483018498ull, 4529206456297584145ull, 4966009732595384991ull, 12375428715440256585ull, 11459593035382857963ull, 15935388236583953579ull, 9547531330649387072ull, 16980278372086236824ull, 17672451801773856928ull, 1757990142633329921ull, 11235479205946876918ull, 12280124599137837982ull, 6637948772898727673ull, 8586344864028544696ull, 2763301233967354752ull, 2895093176010694819ull, 16922508653235911653ull, 2820488357649214227ull, 11965042988359714366ull, 5431993595522478146ull, 13697391415992183677ull, 1206140665926394914ull, 5636599627597266001ull, 6534533528689161830ull, 9442442560691103413ull, 8653970814193318285ull, 15853599033655426943ull, 17213256841491441913ull, 9383573690893286347ull, 4436612361163988565ull, 3404968256324744887ull, 9042821928415197960ull, 709636197669734594ull, 9345030951850124684ull, 928289418628867612ull, 9779587252914877322ull, 12772724317059246845ull, 8274851578327891419ull, 8929599485652982431ull, 2553490674980684790ull, 16962170695531396185ull, 9451566167228582165ull, 4650095399396365210ull, 3126708391338619810ull, 8446041978446379574ull, 6595661615398876899ull, 17606181472543397463ull, 11839466381626527ull, 11296068061606320161ull, 16791578057808287216ull, 5368724161081848974ull, 3564382546033144570ull, 12126207065230224680ull, 13342640688429928115ull, 7533450269191797310ull, 13777275160829437054ull, 4419828572563072958ull, 16819946282645830875ull, 6146662819813878143ull, 17713487071439079834ull, 15351010135315416621ull, 15976305221067256252ull, 11718495412895520253ull, 1337109887978985735ull, 4196189189653584453ull, 18030947193611857639ull, 10505619234935245032ull, 11890103862443477532ull, 11023465614371095393ull, 9368150519821302629ull, 17500253052208302763ull, 9265442081727707837ull, 12806591612295068802ull, 11081682353347071445ull, 15109053386880922280ull, 5979109537542350873ull, 1492033624093754799ull, 12793819911397432137ull, 262184806065131971ull, 12152841109465608967ull, 17069478098212218686ull, 8699017617605957254ull, 10625187571400088746ull, 9805069359295514453ull, 10757346256105718318ull, 4976603234079930230ull, 11945814893661478553ull, 5999010310575503327ull, 2926215040241475817ull, 4106434519536051055ull, 11677772181560752939ull, 9791919269908785973ull, 16609429462348114973ull, 6273212686134029694ull, 7737707049059364186ull, 3200071534348294590ull, 2464064781921492735ull, 11388220957840685567ull, 8452420825840013292ull, 2597080922798411300ull, 15798866331200702176ull, 6626598634638666877ull, 12218674478179407842ull, 16560266157308996593ull, 393460089797046083ull, 17973468154873777424ull, 5744251115392407170ull, 8443803611986932066ull, 13241343798407743123ull, 5055980538528875658ull, 13029230481366637234ull, 4547443281039456390ull, 18403549805368078004ull, 17684747734221327019ull, 10283065374718535905ull, 5647722181645217892ull, 14007388751357156367ull, 9007286142834476924ull, 2829804670851739434ull, 11673364963803496699ull, 8454717087293143106ull, 8319747095234560212ull, 17954334118812685993ull, 4136826586106339075ull, 5380816831779429858ull, 8696945616770033358ull, 17478714420172685885ull, 8598514144621085247ull, 8743371208443909980ull, 5308511300995293313ull, 8033668040055149179ull, 5378313733724667879ull, 13456898608370628066ull, 2819125692113517497ull, 4103501322067222910ull, 10344434008497668235ull, 11035314053857736694ull, 9266771171457609639ull, 540808583745547733ull, 8536528760576789573ull, 10928997270858728061ull, 4767546554556509530ull, 3126818774414125621ull, 67473178238295811ull, 2746104899261632181ull, 11648276619053987483ull, 10801914376395409528ull, 17391710200994541240ull, 18227302103232671269ull, 16119620925645552670ull, 133231866557755157ull, 17725146271746424127ull, 2280663054794595384ull, 1388997370192248570ull, 16083610928712662344ull, 15488595185098862656ull, 8768550686688801811ull, 13588327958018518264ull, 8183413553464264094ull, 14499727842836714837ull, 2271113793274324951ull, 889186411961501962ull, 12585555582280642922ull, 8557556346418703930ull, 4374474637511000020ull, 16309292164646446939ull, 17068835714077939711ull, 17620934149332332214ull, 10121046931328386129ull, 14458430126390539738ull, 16671241663059109805ull, 5806623636912105339ull, 11546164912625941390ull, 8960642450229828ull, 10277033879225507145ull, 16785475890484336014ull, 10388310833534615990ull, 7843204993698645956ull, 14328055187680771427ull, 13694216888749128529ull, 12295448570381887044ull, 2022667154857423077ull, 687478047482875992ull, 14014063139800899858ull, 3942569462299804507ull, 14958504979307275009ull, 3652937838668870951ull, 8893441661259117075ull, 12214341970946632573ull, 660021486348911698ull, 7167955663644316303ull, 127743967943747546ull, 5945976721844467240ull, 13812805722704652431ull, 1815255181203317548ull, 17284235163349752399ull, 7626256079306661538ull, 1257702458557825818ull, 3736457349767849108ull, 14780024936308671060ull, 5912901085270090005ull, 8532813199749507497ull, 17234978711226895335ull, 14336019862228474820ull, 10315885709613140353ull, 9725066349680455116ull, 14306756484452904506ull, 5196785399983827143ull, 2447819479551586820ull, 1169430792169905803ull, 15776319784933483200ull, 18136518110526148508ull, 15911128750617383076ull, 14762235502935118816ull, 1106973482335260306ull, 2155009492059173575ull, 16344266891295289726ull, 14158388452686536055ull, 5124094090499316573ull, 3616697823122471353ull, 2913280100002270119ull, 11027549721504696647ull, 2152064755700337710ull, 267590552516534732ull, 407603250125635650ull, 11918644654139512863ull, 13968909275959124053ull, 11717869630709427550ull, 14392039363920224501ull, 5531193874606418888ull, 2116607216009936608ull, 3271532079004151129ull, 18350464126204610923ull, 18073537636287175721ull, 15547647205812124637ull, 10391464377065641107ull, 10800119981245972274ull, 8729910546187677093ull, 11544024212446111028ull, 8427712363670331324ull, 6813608954621858125ull, 16677871880239800715ull, 2706669428429899205ull, 2592710325990949461ull, 4067426043099124747ull, 14732678956527753386ull, 14470744506516251098ull, 13752601062327990558ull, 12439565106722183845ull, 7366703408929226073ull, 4460704535450811953ull, 7589521649382380605ull, 9164606857138933971ull, 8037402260973833872ull, 11465973672570460705ull, 18232284453455823675ull, 12320966873528633293ull, 12969022554176855771ull, 17199499817898880468ull, 15863534502710170765ull, 4881765649817058737ull, 12344060249763565590ull, 8769806487383817313ull, 5256457426914809789ull, 5975654830951958702ull, 874313968109643860ull, 15849965432501056654ull, 11112864089290880335ull, 3270315204126628387ull, 7146798292117108827ull, 4009391592488973420ull, 10894881151926543619ull, 3446938399919519355ull, 11401423287075568709ull, 154566871629182787ull, 14150636877538222131ull, 16759650334636063153ull, 17140020140381940897ull, 12905803626505381574ull, 15914433132368999090ull, 10289147384992488810ull, 3874767208329999039ull, 13462808799315019203ull, 9101360505712193050ull, 9737643115135455462ull, 5557535225157300783ull, 15935114538885556016ull, 10496300400652604976ull, 444310877258502081ull, 4845968888433480052ull, 10384287830810149608ull, 7985928529088138349ull, 14327850120223820084ull, 17430078763640872752ull, 18020690302964388514ull, 4064614644924372419ull, 12621764374022793557ull, 9756535643714100488ull, 17395597839104200982ull, 10337523208320302925ull, 15266892438586405076ull, 11383457169401249698ull, 5508445386586975756ull, 5270376818040245922ull, 2521462427201914485ull, 5935861524430233908ull, 10325298108269601722ull, 6246377021655085848ull, 1653313597194133989ull, 10413729665218343563ull, 342353914825793815ull, 2097809164278868163ull, 9035461165226640296ull, 2734660522255424911ull, 6213453394293035049ull, 4144622604954000825ull, 10827634273663597275ull, 14464461668626213704ull, 7121087887002626308ull, 696586754537114488ull, 15028922615174776263ull, 3667329862645143074ull, 10752593210315053357ull, 6619441434096776128ull, 5939571398632778107ull, 6163231688971098225ull, 15770981969903358946ull, 8848406238277399762ull, 4366594650286495120ull, 17909263292417335945ull, 9965644208823998300ull, 16262546512501874355ull, 8089533455949107802ull, 18239356288919757991ull, 7745118316473770794ull, 37646575886767736ull, 10852475882620204157ull, 12284945278567574886ull, 627061401124672178ull, 9994187160719307226ull, 17916027913233103814ull, 4698095621487482659ull, 10321888160130790117ull, 9099247726158660572ull, 14538422011018992519ull, 11163306720398893350ull, 9090999944760701772ull, 2061541730305233397ull, 4047523179222418294ull, 10520532380371880314ull, 16072195153092144102ull, 2522214141102701478ull, 15024508539361507572ull, 5431158497672853722ull, 8819472822449751089ull};
    }

    namespace {
        void update_castle_rights_from_corner(BoardState& state, Square corner) {
            if(corner == A1) {
                state.castle_right_mask &= ~WHITE_QS;
            } else if(corner == A8) {
                state.castle_right_mask &= ~BLACK_QS;
            } else if(corner == H1) {
                state.castle_right_mask &= ~WHITE_KS;
            } else if(corner == H8) {
                state.castle_right_mask &= ~BLACK_KS;
            }
        }
    }

    GameState::GameState(FEN const& fen) {
        half_moves = fen.half_moves;
        full_moves = fen.full_moves;
        side_to_move = fen.side_to_move;
    }

    std::optional<CastleBits> get_move_castle_type(BoardState const& state, Move const& move) {
        // better way?
        Piece src_piece = state.pieces[move.source];
        if(src_piece == W_KING) {
            if(move.source == E1 && move.dest == G1 && state.pieces[H1] == W_ROOK) {
                return WHITE_KS;
            } else if(move.source == E1 && move.dest == C1 && state.pieces[A1] == W_ROOK) {
                return WHITE_QS;
            }
        }
        if(src_piece == B_KING) {
            if(move.source == E8 && move.dest == G8 && state.pieces[H8] == B_ROOK) {
                return BLACK_KS;
            } else if(move.source == E8 && move.dest == C8 && state.pieces[A8] == B_ROOK) {
                return BLACK_QS;
            }
        }
        return std::nullopt;
    }

    void Board::generate_legal_moves(MoveVector& moves, GenPolicy policy) {
        return movegen.get_legal_moves(moves, board_state, game_state.side_to_move, policy);
    }

    GameState get_game_state_after_move(Board const& board, Move const& move) {
        auto board_state = board.get_board_state();
        GameState next_state = board.get_game_state();
        auto move_piece = board_state.pieces[move.source];
        bool is_capture = board_state.pieces[move.dest] != NO_PIECE;
        // enp capture
        is_capture |= (type_from_piece(move_piece) == PAWN && move.dest == board_state.enp_square);

        if(color_from_piece(move_piece) == BLACK) {
            ++next_state.full_moves;
        }
        if(type_from_piece(move_piece) == PAWN || is_capture) {
            next_state.half_moves = 0;
        } else {
            ++next_state.half_moves;
        }

        next_state.side_to_move = !next_state.side_to_move;
        return next_state;
    }

    BoardState get_state_after_move(BoardState const& current, Move const& move) {
        BoardState next_state = current;
        next_state.enp_square = std::nullopt; // no enp square unless a double pawn push.
        Piece src_piece = current.pieces[move.source];
        Color side_to_move = color_from_piece(src_piece);

        // moves that change the enp state or castle rights from the previous
        if(type_from_piece(src_piece) == PAWN && move.dest == current.enp_square) {
            // enp capture - involves a capture not at move.dest
            Square enp_capture_square = move.dest + ((side_to_move == WHITE) ? SOUTH : NORTH);
            next_state.remove_piece_from_square(enp_capture_square);
        } else if(type_from_piece(src_piece) == PAWN && vertical_distance(move.source, move.dest) == 2) {
            // double pawn push - creates enp square
            next_state.enp_square = move.source + ((side_to_move == WHITE) ? NORTH : SOUTH);
        } else if(type_from_piece(src_piece) == KING) {
            // king moves - king can no longer castle + castling involves moving associated rook
            auto side_castle_flags = (side_to_move == WHITE) ? (WHITE_QS | WHITE_KS) : (BLACK_QS | BLACK_KS);
            next_state.castle_right_mask &= ~side_castle_flags;
            auto castle_type = get_move_castle_type(current, move);
            if(castle_type) {
                switch(castle_type.value()) {
                    case WHITE_KS:
                        next_state.remove_piece_from_square(H1);
                        next_state.place_piece_on_square(W_ROOK, F1);
                        break;
                    case WHITE_QS:
                        next_state.remove_piece_from_square(A1);
                        next_state.place_piece_on_square(W_ROOK, D1);
                        break;
                    case BLACK_KS:
                        next_state.remove_piece_from_square(H8);
                        next_state.place_piece_on_square(B_ROOK, F8);
                        break;
                    case BLACK_QS:
                        next_state.remove_piece_from_square(A8);
                        next_state.place_piece_on_square(B_ROOK, D8);
                        break;
                }
            }
        } else if(type_from_piece(src_piece) == ROOK && is_corner_square(move.source)) {
            // moving a rook from a corner will change the castling rights.
            update_castle_rights_from_corner(next_state, move.source);
        }

        // update castle rights when potentially capturing an unmoved rook
        if(is_corner_square(move.dest)) {
            update_castle_rights_from_corner(next_state, move.dest);
        }

        // handle moving the piece and possible promotions.
        Piece dest_piece = move.promotion == NO_PIECE ? src_piece : move.promotion;
        next_state.remove_piece_from_square(move.source);
        next_state.remove_piece_from_square(move.dest); // cryptic
        next_state.place_piece_on_square(dest_piece, move.dest);
        return next_state;
    }

    void Board::set_position(const FEN &fen) {
        game_state = GameState(fen);
        board_state = BoardState(fen);
    }

    void Board::make_move(jchess::Move const& move) {
        prev_board_states.push(board_state);
        prev_game_states.push(game_state);
        game_state = get_game_state_after_move(*this, move);
        board_state = get_state_after_move(board_state, move);
    }

    bool Board::unmake_move() {
        if(prev_board_states.empty()) {
            return false;
        }
        board_state = prev_board_states.top();
        prev_board_states.pop();
        game_state = prev_game_states.top();
        prev_game_states.pop();
        return true;
    }

    std::string Board::to_string() {
        std::ostringstream oss;
        for(int rank = 7; rank >= 0; --rank) {
            for(int file = 0; file < 8; ++ file) {
                Piece piece = board_state.pieces[square_from_rank_file(rank, file)];
                oss << char_from_piece(piece);
            }
            oss << std::endl;
        }
        return oss.str();
    }

    bool Board::can_enp_capture() const {
        Color color = game_state.side_to_move;
        if(!board_state.enp_square.has_value()) {
            return false;
        }
        Square enp = board_state.enp_square.value();
        Bitboard squares = PAWN_ATTACKS[!color][enp];
        Square src;
        while(pop_lsb_square(squares, src)) {
            if(board_state.pieces[src] == (PAWN | color)) {
                return true;
            }
        }
        return false;
    }

    int Board::get_num_pieces() const {
        return std::popcount(board_state.all_pieces_bb);
    }

    int Board::get_num_pawns() const {
        return std::popcount(board_state.piece_bbs[PAWN | WHITE] | board_state.piece_bbs[PAWN | BLACK]);
    }

    uint64_t ZobristHasher::hash_board(jchess::Board const&board) const {
        BoardState state = board.get_board_state();
        int enp_offset = get_enp_offset(board);

        uint64_t piece = 0ull;
        for(Square sq=A1; sq<NUM_SQUARES; ++sq) {
            int piece_offset = get_piece_offset(sq, state.pieces[sq]);
            if(piece_offset != NO_OFFSET) {
                piece ^= hash_values[piece_start + piece_offset];
            }
        }

        uint64_t castle = 0ull;
        CastleBits castle_types[4] {WHITE_QS, WHITE_KS, BLACK_QS, BLACK_KS};
        for(CastleBits type : castle_types) {
            int castle_offset = get_castle_offset(static_cast<CastleBits>(type & state.castle_right_mask));
            if(castle_offset != NO_OFFSET) {
                castle ^= hash_values[castle_start + castle_offset];
            }
        }

        uint64_t enp = (enp_offset == NO_OFFSET) ? 0ull : hash_values[enp_start + enp_offset];
        uint64_t turn = should_use_turn_value(board.get_side_to_move()) ? hash_values[turn_start] : 0ull;
        return piece ^ castle ^ enp ^ turn;
    }

    BoardZobristHasher::BoardZobristHasher() : ZobristHasher(zobrist_values, ZOB_PIECE_OFFSET, ZOB_CASTLE_OFFSET, ZOB_ENP_FILE_OFFSET, ZOB_SIDE_OFFSET) {}

    int BoardZobristHasher::get_piece_offset(Square square, Piece piece) const {
        if(piece == NO_PIECE) {
            return NO_OFFSET;
        }
        return static_cast<int>(square) * piece;
    }

    int BoardZobristHasher::get_castle_offset(CastleBits castle_type) const {
        switch (castle_type) {
            case WHITE_KS:
                return 0;
            case WHITE_QS:
                return 1;
            case BLACK_KS:
                return 2;
            case BLACK_QS:
                return 3;
            default:
                return NO_OFFSET;
        }
    }

    int BoardZobristHasher::get_enp_offset(const Board &board) const {
        auto enp = board.get_board_state().enp_square;
        if(enp.has_value()) {
            return file_of(enp.value());
        }
        return NO_OFFSET;
    }

    bool BoardZobristHasher::should_use_turn_value(Color color) const {
        return color == WHITE;
    }


}